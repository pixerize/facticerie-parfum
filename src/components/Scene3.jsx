/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 scene.gltf
Author: DatSketch (https://sketchfab.com/DatSketch)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/apple-iphone-13-pro-max-4328dea00e47497dbeac73c556121bc9
Title: Armani Parfume Bottle Code
*/

import React, {useLayoutEffect, useEffect, useState} from 'react'
import {useGLTF} from '@react-three/drei'
import {useThree} from "@react-three/fiber";
import * as THREE from 'three';
import { a, useSpring } from '@react-spring/three';

export function Model3(props, {onClick}) {
    //vars
    // Add error handling to model loading
    const model = useGLTF('/sceneParfume.gltf', true,
        (error) => {
            console.error('Error loading model:', error)
        }
    )
    const { nodes, materials } = model
    let camera = useThree(state => state.camera)
    const [capOpen, setCapOpen] = useState(false);

    // Spring animation for cap Y position
    const { capY } = useSpring({
        capY: capOpen ? 20.5 : 20, // adjust open/closed Y positions as needed
        config: { tension: 120, friction: 10 },
    });

    // useEffect(() => {
    //     console.log('All model nodes:');
    //     Object.keys(nodes).forEach((key) => {
    //         console.log(key);
    //     });
    // }, []);

    // useEffect(() => {
    //     console.log('Children of "Bottle":', model.nodes.Bottle.children.map(child => child.name));
    // }, []);

    // Material corrections to fix "hollow" look
    useEffect(() => {
        model.scene.traverse((child) => {
            if (child.isMesh && child.material) {
                const mat = child.material;

                mat.side = useThree.FrontSide;
                mat.transparent = false;
                mat.opacity = 1;
                mat.depthWrite = true;
                mat.depthTest = true;
                mat.envMapIntensity = 2;


                // Material logic
                if (child.name.includes('Glass')) {
                    // Bottle body (with texture)
                    mat.roughness = 0.2;
                    mat.metalness = 0.3;
                } else if (child.name.includes('Nozzle') || child.name.includes('Top')) {
                    // Restore metallic top / nozzle
                    mat.metalness = 1;
                    mat.roughness = 0.1;
                    mat.map = null;
                }

                mat.needsUpdate = true;

            }
        });
    }, [model]);



    //animations

    useLayoutEffect(() => {

        camera.position.set(-0.1, 0.4, 3);


        if(window.matchMedia("(max-width: 48em)").matches){
            camera.fov = 35;
            camera.updateProjectionMatrix();
        }

    },  [camera]);
    useEffect(() => {
        console.log('Available mesh nodes:', nodes);
    }, []);

    return (
        <group {...props} dispose={null}
               onClick={onClick}
        >
            <group scale={0.01}>
                <group position={[0, -30, 0]} rotation={[-Math.PI / 2, 0, 0]} scale={10}>

                    <mesh geometry={nodes.Bottle_Glass_0.geometry} material={materials.Glass} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_1.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_2.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_3.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_4.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_5.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_6.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_7.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_8.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_9.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_10.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_11.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_12.geometry} material={materials.MainMaterial} />
                    <mesh geometry={nodes.Bottle_MainMaterial_0_13.geometry} material={materials.MainMaterial} />
                </group>
            </group>
        </group>
    )
}

useGLTF.preload('/sceneParfume.gltf')
